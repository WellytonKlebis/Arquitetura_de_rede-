---    
    
AWSTemplateFormatVersion: "2010-09-09"
Description: " Cria uma vpc, similar ao vpc Wizard "
   Parameters: 

   VPCName: 
   Description: Nome vpc a ser criada
   Type: String 
   Default: "Minha-vpc-cloudformation"

Mappings: 
  SubnetConfig:
   VPC:
      CIDR: "10.0.0.0/16"
   Public0: 
      CIDR: "10.0.1.0/24"
   Public0: 
      CIDR: "10.0.2.0/24"

   AZRegions:  
     us-east-1:
      AZs: ["a", "b"] 
     sa-east-1: 
      AZs: ["a", "b"]  

Resource: 
  VPC:
   Type: "AWS::EC2::VPC"
   Properties:
     EnableDnsSupport: "true"
     EnableDnsHostnames: "true"
     CidrBlock:
       Fn::FinInMap:
         - "SubnetConfig"
         -  "VPC"
         -  "CIDR"
      Tags:
        -
        Key: "Application"
        Value:
        Ref: "Application"

        -
        Key: "Network"
        Value: "Public"

        -
        Key: "Name"
        Value: !Ref 'VPCName'

   PublicSubnet0:
   Type : "AWS::EC2::Subnet" 
   Properties: 
     VpcId:
       Ref: "VPC"
     AvailabilityZone:
       Fn::Sub:
       - "${AWS::Region}${AZ}"   
       - AZ: !Select [0, !FindInMap ["AZRegions" , !Ref "AWS::Region, ", "AZs" ] ]
    CidrBlock:
       Fn::FindIdMap:
       - "SubnetConfig"
       - "Public0"
       - "CIDR"
    MapPublicIpOnLauch: "true"
    Tags:
     - 
       Key: "Application"
       Value:
       Ref: "AWS::StackName:"
     -
       Key: "Name" 
       Value: "Public" 
     -
      Key: "Name"
      Value: !Join
       - '' 
       - - !Ref "VPCName" 
         - '-public-'
         - !Select [0, !FindIdMap ["AZRegions", !Ref "AWS::Region", "AZs " ] ]   


  PrivateSubnet0: 
     Type: "AWS::EC2:Subnet"
     Properties:
       VpcId:
       Ref: "VPC"
       AvailabiltyZone: 
         Fn::Sub:
         - "${AWS::Region}${AZ}}"
         - AZ: !Select [0, !FindIdMap ["AZRegions", !Ref "AWS::Region", "AZs " ]]
       CidrBlock
       Fn::FindIdMap:
         - "SubnetConfig" 
         - "Private0"
         - "CIDR"
      Tags: 
         - 
          Key: "Application"
          Value:
           Ref: "AWS::StackName"
        -
           Key: "Network"
           Value: "Private"
         
        -
           Key: "Name"
           Value: !Join
           - ''
           - - !Ref "VPCName"
             - '-private-'
             !Select [0, !FindIdMap ["AZRegions", !Ref "AWS::Region", "AZs " ] ]

InternetGateway: 
       Type: "AWS::EC2::InterneGsteway"

       Properties:  
         Tags:
         - 
           Key: "Application"
           Value: 
           Ref: "AWS::StackName"
         - 

           Key: "Network"
           Value: "Public"
         
        -
           Key: "Name"
           Value: !Join
       

          - ''
           - - !Ref "VPCName"
             - '-IGW'
             !Select [0, !FindIdMap ["AZRegions", !Ref "AWS::Region", "AZs " ] ]

GatewayToInternet:
Type: "AWS::EC2::VPCGatewayAttachment"
Properties:
VpcId: 
Ref: "VPC"

InternetGatwayId: 
Ref: "InternetGateway"

PublicRouteTable:
Type: "AWS::EC2::RouteTable"
Properties:
VpcId:
  Ref: "VPC"

Tags:

-
  Key: "Application"
  Value:
    Ref: "AWS::StackName"
   
-   
   Key: "Network"
   Value: "Public"
 - 
   Key: "Name"
   Value: !Join
     - ''
     - - !Ref "VPCName"
       - '-public-route-table'



 PublicRoute:

Type: "AWS::EC2::Route"
DependsOn: "GatewayToInternet"
   Properties:
     RouteTableId:
     Ref: "PublicRouteTable"
     DestinationCidrBlock: "0.0.0.0/0"
     GatewayId:
      Ref: "InternetGateway"
     

 PublicSubnetRouteTableAssociation0:
 Type: "AWS::EC2::SubneteRouteTableAssociation"
 Properties:
 SubnetId:
 Ref: PublicSubnet0:

 RouteTableId:
    Ref: "PublicRouteTable"



 PublicNetworkAcl:
  Type: "AWS::EC2::NetworkAcl"   
 Properties:
   VpcId:
     Ref: "VPC"
 Tags:
   - 
     Key: "Application"
     Value: 
     Ref: "AWS::StackName" 
    -
     Key: "Network"
     Value: "Public"
    -
     Key:  "Name"
     Value: !Join
     - ''
     - - !Ref "VPCName"
        - '-public-nacl'

           

InboundHTTPPublicNetworkAclEntry:
   Type: "AWS::EC2::NetworkaclEntry"
 Properties:
 NetworkaclId:
 Ref: "PublicNetworkAcl"
 RuleNumber: "100"  
 Protocol: "-1"
 RuleNumber: "allow"
 Engress: "false"
CidrBlock: "0.0.0.0/0"
PortRange: 
 From: "0"
 To: "65535"


    
        
OutboundPublicNetworkAclEntry:
 Type: "AWS::EC2::NetworkAclEntry"
 Properties:
 NetworkAclId:
  Ref: "PublicNetworkAcl"
 RuleNumber: "100"
 Protocol: "-1"
 RuleAction: "allow" 
Egress: "true"
CidrBlock: "0.0.0.0/0"
PortRange:
 From: "0"
 To: "65535"


PublicSubnetNetworkAclAssociation0:
 Type: "AWS::EC2::SubnetNetworkAclAssociation"
 Properties:
  SubnetId:
   Ref: "PublicSubnet0"
 NetworkAclId:
   Ref: "PublicNetworkAcl"


ElasticIP0:

   Type: "AWS::EC2::EIP"
    Properties:
     Domain: "vpc"

NATGateway0:
   Type: "AWS::EC2::NatGateway"
   Properties:
   Allocation:
   Fn::GetAtt:
   - "ElasticIP0"
   - "AllocantionId"
   SubnetId:
    Ref: "PublicSubnet0"

PrivateRouteTable0:
   Type: "AWS::EC2::RouteTable"
    Properties:
       VpcId:
       Ref: "VPC"
       Tags: 
       -
         Key: "Name"
        Value: !Join
        - ''
        - - !Ref "VPCName"
        - '-private-route-table-0'


PrivateRouteTable0:
  Type:
  Properties:
  RouteTableId:
  Tags:

  -

  Key: "Name"
  Value: !Join
     - ''
     - - !Ref "VPCName"
     -  '-private-route-table-0'


     PrivateRouteToInternet0:
  Type: "AWS::EC2::Route"
  Properties:
  RouteTableId:
   Ref: "PrivateRouteTable0"

   DestinationCidrBlock: "0.0.0.0/0"
   NatGatewayId:
   Ref: "NatGateway0"



 PrivateSubnetRouteTableAssociation0:
   Type: "AWS::EC2::SubneteRouteTableAssociation"
   Properties: 
      SubnetId:
      Ref: "PrivateRouteTable0"
    RouteTableId:
    Ref: "PrivateSubnet0"
    RouteTableId:
    Ref: "PrivateRouteTable0"




Outputs:

VPCId:
Description: "VPCId of VPC"
Value:
Ref "VPC"
Export:
Name: !Sub "{AWS::Region}--${AWS::StackName}--VPC"



PublicSubnet0:
Description: "SubnetId of public subnet 0"
Value: 
  Ref: "PublicSubnet0"
  Export:
Name: !Sub "{AWS::Region}--${AWS::StackName}--PublicSubnet0"


PrivateSubnet0:
Description: "SubnetId of private subnet 0"
Value: 
  Ref: "PrivateSubnet0"
  Export:
  Name: !Sub "{AWS::Region}--${AWS::StackName}--PrivateSubnet0"


DefaultSecurityGroup:

Description: "DefaultSecurityGroup Id"
Value: !GetAtt VPC.DefaultSecurityGroup
Export:

Name: !Sub Name: !Sub "{AWS::Region}--${AWS::StackName}--DefaultSecurityGroup"
    
    